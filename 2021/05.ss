(load "lib.ss")
(define (parse input)
  (let ((point (lambda (fragment)
    (let ((parts (split (partial equal? #\,) (string->list fragment))))
      (list (char-list->number 10 (car parts)) (char-list->number 10 (cadr parts)))))))
      (map
        (lambda (parts)
          (list (point (car parts)) (point (caddr parts))))
          (groups 3 (words input)))))
(define (points-in-line line)
  (define (points-in-line-aux line acc)
    (let* ((r1 (caar line))
        (c1 (cadar line))
        (r2 (caadr line))
        (c2 (cadadr line))
        (r-dir (sign (- r2 r1)))
        (c-dir (sign (- c2 c1)))
        (acc (cons (list r1 c1) acc)))
      (if
        (and (= r-dir 0) (= c-dir 0))
        acc
        (points-in-line-aux
          (list (list (+ r1 r-dir) (+ c1 c-dir)) (list r2 c2))
          acc))))
  (points-in-line-aux line '()))
(define (a input)
  (let* (
      (lines (filter
        (lambda (line)
          (let ((r1 (caar line))
              (c1 (cadar line))
              (r2 (caadr line))
              (c2 (cadadr line)))
            (or (eq? r1 r2) (eq? c1 c2))))
        (parse input)))
      (points (apply append (map points-in-line lines)))
      (f (freqs points)))
    (length (filter (lambda (f) (> (cadr f) 1)) f))))
(define (b input)
  (let* ((points (apply append (map points-in-line (parse input))))
      (f (freqs points)))
    (length (filter (lambda (f) (> (cadr f) 1)) f))))