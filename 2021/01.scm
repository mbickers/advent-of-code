(load "lib.scm")
(define input (input))
(define (split sep l)
  (if (null? l)
    '()
    (if (equal? (car l) sep)
      (cons '() (split sep (cdr l)))
      (if (null? (cdr l))
        (list l)
        (let ((rest (split sep (cdr l))))
          (cons (cons (car l) (car rest)) (cdr rest)))))))
(define (fold f init l)
  (if (null? l)
    init
    (fold f (f init (car l) (cdr l)))))
(pipe input
  string->list
  (lambda (s) (split #\newline s))
  (lambda (s) (map list->string s))
  (lambda (s) (map string->number s))
  (lambda (s) (zip s (cdr s)))
  (lambda (s) (map (lambda (p) (if (< (car p) (cadr p)) 1 0)) s))
  (lambda (s) (apply + s))
  display)
(newline)
(pipe input
  string->list
  (lambda (s) (split #\newline s))
  (lambda (s) (map list->string s))
  (lambda (s) (map string->number s))
  (lambda (s) (zip s (cdr s) (cddr s)))
  (lambda (s) (map (lambda (p) (apply + p)) s))
  (lambda (s) (zip s (cdr s)))
  (lambda (s) (map (lambda (p) (if (< (car p) (cadr p)) 1 0)) s))
  (lambda (s) (apply + s))
  display)